Text.tellraw(@a, "Core Scripts Loaded");
function c_sb() { $scoreboard objectives add $(sc_name) dummy; }
// Create basic scoreboards

// Lobby related
c_sb(sc_name="nn_lobbymusic");
c_sb(sc_name="nn_lobby");

// Gameplay Related
c_sb(sc_name="nn_spawn");
c_sb(sc_name="nn_possesion");
c_sb(sc_name="nn_possesion_min");
c_sb(sc_name="nn_possesion_sec");
c_sb(sc_name="nn_possesion_msec");
c_sb(sc_name="nn_possession_effect");



// Run Every Tick
function __tick__() {
root();
}





// Root function to create scoreboards if not created already
function root() {
    //Manage music system
    lobby_music();
    //Clear names
    hide_as_names();
    // Round Manager
    // Count Online Players
    execute store result score online nn_lobby if entity @a;
    round_manager();


    // If start time has been called then run it
    if (nn_lobby:start_timer = 1) {timer_msec();}

}













// -- Core Code

// üîß Round Manager
function round_manager() {

    // Check if theres enough players to start
    if (nn_lobby:online >= nn_lobby:req_players) {
        // Set the phase to 2 - Pre-Voting
        if (nn_lobby:phase = 1) {
            scoreboard players set phase nn_lobby 2;
            Text.tellraw(@a, "&<gray> ‚Ñπ | Starting Phase 2");
            scoreboard players set min nn_lobby 0;
            scoreboard players set sec nn_lobby 10;
            scoreboard players set start_timer nn_lobby 1; // Start the timer
            }
    } else {
        scoreboard players set phase nn_lobby 1;
        bossbar set minecraft:game name
         [{"text":"Waiting for players... "},
         {"score":{"name":"online","objective":"nn_lobby"},"color":"yellow"},
         {"text":" / ","color":"yellow"},{"score":{"name":"req_players","objective":"nn_lobby"},"color":"yellow"}
         ];
        scoreboard players set start_timer nn_lobby 0; // Stop the timer
    }





    // Start the voting phase
    if (nn_lobby:phase = 2) {
        if (nn_lobby:min < numbers:0) {
            scoreboard players set phase nn_lobby 3;
            Text.tellraw(@a, "&<gray> ‚Ñπ | Starting Phase 3");
            Text.tellraw(@a, "&<gray> ‚Ñπ | We will pick some maps now...");
            scoreboard players set min nn_lobby 0;
            scoreboard players set sec nn_lobby 40;
            scoreboard players set start_timer nn_lobby 0; // Stop the timer


            // Pick random maps

            //map_1
            tag @e[type=minecraft:pig,limit=1,sort=random,tag=] add map_1;
            tag @e[tag=map_1] remove map_2;
            tag @e[tag=map_1] remove map_3;
            tellraw @a [{"text":" ‚Ñπ | Picked ","color":"gray"},{"selector":"@e[tag=map_1]","color":"yellow"}];

            //map_2
            tag @e[type=minecraft:pig,limit=1,sort=random,tag=] add map_2;
            tag @e[tag=map_2] remove map_1;
            tag @e[tag=map_2] remove map_3;
            tellraw @a [{"text":" ‚Ñπ | Picked ","color":"gray"},{"selector":"@e[tag=map_2]","color":"yellow"}];

            //map_3
            tag @e[type=minecraft:pig,limit=1,sort=random,tag=] add map_3;
            tag @e[tag=map_3] remove map_1;
            tag @e[tag=map_3] remove map_2;
            tellraw @a [{"text":" ‚Ñπ | Picked ","color":"gray"},{"selector":"@e[tag=map_3]","color":"yellow"}];


            scoreboard players set open nn_voting_open 1; // Open the gui 
            Text.tellraw(@a, "&<gray> ‚Ñπ | Maps has been picked! GUI has been opened.");
            scoreboard players set start_timer nn_lobby 1; // Start the timer
    }}




        // Load map
    if (nn_lobby:phase = 3) {
        if (nn_lobby:min < numbers:0) {
            scoreboard players set phase nn_lobby 4;
            Text.tellraw(@a, "&<gray> ‚Ñπ | Starting Phase 4");
            Text.tellraw(@a, "&<gray> ‚Ñπ | Loading map that has won!");
            scoreboard players set min nn_lobby 0;
            scoreboard players set sec nn_lobby 10;



            Text.tellraw(@a, "&<gray> ‚Ñπ | Map has been loaded!");
            scoreboard players set start_timer nn_lobby 0; // Stop the timer
    }}

}








// üéµ Music Manager
function lobby_music() {

    if (nn_lobby:phase <= 3) {
        scoreboard players add tick nn_lobbymusic 1;
        if (nn_lobbymusic:tick >= nn_lobbymusic:max) {scoreboard players add track_number nn_lobbymusic 1; scoreboard players set playing nn_lobbymusic 0;}


        // Switch function for playing music - Use this tool to calculate the "max" value: https://www.reimaginednetwork.net/minecrafttickcalculator
        if (nn_lobbymusic:playing = 0) {
            scoreboard players set playing nn_lobbymusic 1;
            scoreboard players set tick nn_lobbymusic 0;
            switch (nn_lobbymusic:track_number) {
                case 1:
                    scoreboard players set max nn_lobbymusic 2180;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..10] run playsound vibecraft:bee_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                case 2:
                    scoreboard players set max nn_lobbymusic 3000;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..100.0] run playsound vibecraft:delta_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                case 3:
                    scoreboard players set max nn_lobbymusic 3160;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..100.0] run playsound vibecraft:sherbet_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                case 4:
                    scoreboard players set max nn_lobbymusic 3360;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..100.0] run playsound vibecraft:pluggnb_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                case 5:
                    scoreboard players set max nn_lobbymusic 2960;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..100.0] run playsound vibecraft:lucid_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                case 6:
                    scoreboard players set max nn_lobbymusic 1440;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..100.0] run playsound vibecraft:asteries_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                case 7:
                    scoreboard players set max nn_lobbymusic 1200;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..100.0] run playsound vibecraft:littlebig_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                case 8:
                    scoreboard players set max nn_lobbymusic 2020;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..100.0] run playsound vibecraft:thoughtbody_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                case 9:
                    scoreboard players set max nn_lobbymusic 1520;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..100.0] run playsound vibecraft:video_game_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                case 10:
                    scoreboard players set max nn_lobbymusic 2300;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..100.0] run playsound vibecraft:nextbob_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                case 11:
                    scoreboard players set max nn_lobbymusic 1280;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..100.0] run playsound vibecraft:chill_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                case 12:
                    scoreboard players set max nn_lobbymusic 2020;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..100.0] run playsound vibecraft:nostalgia_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                case 13:
                    scoreboard players set max nn_lobbymusic 3600;
                    execute at @e[tag=lobby_music] run execute at @a[distance=..100.0] run playsound vibecraft:seal_the_deal_lobby master @p[limit=1] ~ ~ ~ 0.2 1;
                default:
                    scoreboard players set track_number nn_lobbymusic 0;
                    scoreboard players set max nn_lobbymusic 10;
            }
        }

    }
}

// ‚è∞ Basic Timer Stuff



function timer_msec() {
    if (nn_lobby:start_timer = 1) {
        scoreboard players remove msec nn_lobby 1;
        bossbar set minecraft:game name
         [{"score":{"name":"min","objective":"nn_lobby"},"color":"yellow"},
         {"text":" : ","color":"yellow"},{"score":{"name":"sec","objective":"nn_lobby"},"color":"yellow"}
         ];
    }

    if (nn_lobby:msec <= numbers:20) {
        scoreboard players set msec nn_lobby 0;
        scoreboard players remove sec nn_lobby 1;
        timer_sec();
    }}

    function timer_sec() {
        if (nn_lobby:sec <= numbers:0) {
        scoreboard players set sec nn_lobby 59;
        scoreboard players remove min nn_lobby 1;
}}
    






// -- Executable tools







// Simple function to create marker
function create_marker() {
    $Text.tellraw(@s, "&<gray> ‚Ñπ | Generated $(Tag)");
    $give @s minecraft:armor_stand[minecraft:entity_data={Invisible:true,Invulnerable:true,NoBasePlate:true,NoGravity:true,Small:true,CustomNameVisible:false,DisabledSlots:4128768,Tags:["$(Tag)"],id:"minecraft:armor_stand"},minecraft:custom_name='{"text":"$(Tag) Marker"}'] 1;
}

// Simple function to create mob marker
function create_mob() {
    $Text.tellraw(@s, "&<gray> ‚Ñπ | Generated $(Name)");
    $give @s drowned_spawn_egg[custom_name='[{"text":"Map Entry $(Name)","italic":false}]',entity_data={id:pig,CustomName:'[{"text":"$(Name)"}]',CustomNameVisible:1b,Invulnerable:1b,NoAI:1b,NoGravity:1b,PersistenceRequired:1b,Silent:1b}] 1;
}




function hide_as_names() {
    
    execute at @a if score @p nn_asplaced >= 1 nn_asplaced expand {
      execute as @e[type=armor_stand] run data modify entity @s CustomNameVisible set value 0b;
      Text.tellraw(@a, "&<yellow> ‚ö† | Optimizing Stuff...");
      scoreboard players set @p nn_asplaced 0;
    }
}





                    // $Text.tellraw(@s, "<grey> ‚Ñπ | $(text)");

                    // $Text.tellraw(@s, "<yellow> ‚ö† | $(text)");

                    // $Text.tellraw(@s, "<red> üõë | $(text)");

                    // $Text.tellraw(@s, "<dark_grey> ‚ùî | $(text)");


// Discord Broadcast
function dc_bcast() {
    $discord bcast $(Msg);
}